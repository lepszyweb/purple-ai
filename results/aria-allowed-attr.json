{
  "div_aria-expanded": "Problem w podanym fragmencie kodu polega na tym, że atrybut `aria-expanded` nie jest dozwolony w elemencie `div`.\n\nAby rozwiązać ten problem, możesz użyć elementu button zamiast div, ponieważ atrybut `aria-expanded` jest dozwolony w elementach button.\n\nOto poprawiona wersja fragmentu kodu:\n\n```\n<button aria-expanded=\"false\"></button>\n```",
  "div_aria-controls_aria-expanded_aria-haspopup": "Problem polega na tym, że element `div` ma atrybuty ARIA, które nie są dozwolone dla jego roli. W szczególności, atrybut `aria-haspopup` powinien być używany tylko z elementami, które mają rolę `button`, `menuitem`, `combobox` lub `textbox`.\n\nAby naprawić problem, można zmienić element `div` na element `button` i usunąć atrybut `aria-haspopup`, jeśli nie jest on potrzebny. Jeśli element rzeczywiście powinien otwierać okno dialogowe, można zachować atrybut `aria-haspopup`.\n\nOto poprawiona wersja fragmentu kodu:\n\n```html\n<button aria-controls=\"el-id-8872-1\" aria-expanded=\"false\" aria-haspopup=\"dialog\">\n```\n\nJeśli element `div` musi pozostać elementem `div`, możesz przypisać mu odpowiednią rolę i odpowiednio go wystylizować:\n\n```html\n<div role=\"button\" aria-controls=\"el-id-8872-1\" aria-expanded=\"false\" aria-haspopup=\"dialog\" tabindex=\"0\">\n```\n\nW tym przypadku nie zapomnij dodać `tabindex=\"0\"`, aby `div` był fokusowalny i obsługiwał zdarzenia klawiatury dla celów dostępności.",
  "fieldset_aria-required": "Problem w tym fragmencie kodu polega na tym, że atrybut `aria-required` nie jest dozwolony w elemencie `fieldset`. Zamiast tego należy zastosować atrybut `aria-required` do poszczególnych kontrolek formularza w zestawie pól.\n\nOto poprawiona wersja fragmentu kodu:\n\n```\n<fieldset>\n  <input type=\"text\" aria-required=\"true\">\n  <!-- inne kontrolki formularza -->\n</fieldset>\n```\n\nW tym przykładzie atrybut `aria-required` jest stosowany do elementu `input`, który jest kontrolką formularza w zestawie pól. Upewnij się, że zastosowałeś atrybut `aria-required` do wszystkich wymaganych kontrolek formularza w zestawie pól.",
  "div_aria-label_style_tabindex_title": "Problemem w tym fragmencie kodu jest użycie atrybutu `aria-label` na elemencie `div`, co jest niedozwolone. Lepszą alternatywą byłoby użycie bardziej odpowiedniego elementu z nieodłączną rolą, takiego jak element `button` lub `a` (anchor), w zależności od zamierzonej funkcjonalności.\n\nOto poprawiona wersja fragmentu kodu wykorzystująca element `button`:\n\n```html\n<button style=\"border: none; height: 90px; width: 728px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-block;\" tabindex=\"0\" title=\"...\" aria-label=\"...\">\n</button>\n```\n\nLub, jeśli ma to być link, możesz użyć elementu `a` (anchor):\n\n```html\n<a href=\"#\" style=\"border: none; height: 90px; width: 728px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-block;\" tabindex=\"0\" title=\"...\" aria-label=\"...\">\n</a>\n```\n\nPamiętaj, aby dostosować atrybut `href` dla elementu kotwicy lub dodać niezbędne detektory zdarzeń JavaScript dla elementu przycisku, aby osiągnąć pożądaną funkcjonalność.",
  "span_aria-expanded": "Problem polega na tym, że atrybut `aria-expanded` nie jest dozwolony w elemencie `span`. Aby to naprawić, możemy użyć bardziej odpowiedniego elementu, takiego jak `button`.\n\nOto poprawiony fragment kodu:\n\n```html\n<button aria-expanded=\"false\">...</button>\n```\n\nTeraz atrybut `aria-expanded` jest poprawnie używany z elementem `button`, dzięki czemu jest on dostępny.",
  "a_role=\"menuitemradio\"": "Problem we fragmencie kodu polega na tym, że atrybut `aria-selected` nie jest dozwolony dla roli `menuitemradio`. Zamiast tego należy użyć atrybutu `aria-checked`.\n\nOto poprawna wersja fragmentu kodu:\n\n```\n<a aria-checked=\"false\" href=\"...\" role=\"menuitemradio\">\n```",
  "span_aria-sort": "Problem polega na tym, że atrybut `aria-sort` nie jest dozwolony w elemencie `span`. Atrybut `aria-sort` powinien być używany na elementach z rolą \"columnheader\" lub \"rowheader\".\n\nAby naprawić problem, można zmienić element na `th` (nagłówek tabeli) z rolą \"columnheader\" lub \"rowheader\" i zastosować do niego atrybut `aria-sort`.\n\nOto poprawiona wersja fragmentu kodu:\n\n```html\n<th role=\"columnheader\" aria-sort=\"none\">...</th>\n```\n\nJeśli nadal chcesz użyć elementu `span`, możesz zawinąć go wewnątrz elementu `th` z odpowiednią rolą i atrybutem `aria-sort`:\n\n```html\n<th role=\"columnheader\" aria-sort=\"none\"><span>...</span></th>\n```",
  "mat-chip-list_aria-disabled_aria-invalid_aria-label_aria-multiselectable_aria-orientation_tabindex": "Problemem w podanym fragmencie kodu jest użycie atrybutów `aria-disabled`, `aria-invalid` i `aria-multiselectable` w elemencie `mat-chip-list`. Te atrybuty ARIA nie są dozwolone dla roli tego elementu.\n\nPrawidłowa wersja fragmentu kodu powinna wyglądać następująco:\n\n```\n<mat-chip-list aria-label=\"...\" aria-orientation=\"horizontal\" tabindex=\"-1\">\n```"
}

